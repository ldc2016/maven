<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:annotation-config />
    <context:component-scan base-package="com.ldc.common.repository" />
    <context:component-scan base-package="com.ldc.common.service" />
    <context:component-scan base-package="com.ldc.springLearn.aspect" />
    <context:component-scan base-package="com.ldc.springLearn.advice" />

    <!--<bean id="propertyConfigure" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="locations">-->
            <!--<list>-->
                <!--<value>classpath*:spring/properties/development.properties</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="10" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />

        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ldc.common.**.repository" />
        <property name="sqlSessionFactoryBeanName" value="myBatisSqlSessionFactory" />
        <property name="annotationClass" value="org.springframework.stereotype.Repository" />
    </bean>

    <bean id="myBatisSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath*:com/ldc/common/mapper/*.xml" />
    </bean>

    <!--redis pool config start-->
    <!--<bean id="abstractRedisCacheManager" class="com.ldc.redis.cluster.impl.RedisApiByJedisClientManagerImpl" abstract="true">-->
        <!--<property name="maxActive">-->
            <!--<value>${redis.maxActive}</value>-->
        <!--</property>-->
        <!--<property name="maxIdle">-->
            <!--<value>${redis.maxIdle}</value>-->
        <!--</property>-->
        <!--<property name="maxWait">-->
            <!--<value>${redis.maxWait}</value>-->
        <!--</property>-->
        <!--<property name="testOnBorrow">-->
            <!--<value>${redis.testOnBorrow}</value>-->
        <!--</property>-->
        <!--<property name="timeOut">-->
            <!--<value>${redis.timeOut}</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="redisCacheManager00" class="com.ldc.redis.cluster.impl.RedisApiByJedisClientManagerImpl" init-method="init" parent="abstractRedisCacheManager">-->
        <!--<property name="redisHost">-->
            <!--<value>${redis.cache00.host.name}</value>-->
        <!--</property>-->
        <!--<property name="redisPort">-->
            <!--<value>${redis.cache00.host.port}</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="redisCacheManager01" class="com.ldc.redis.cluster.impl.RedisApiByJedisClientManagerImpl" init-method="init" parent="abstractRedisCacheManager">-->
        <!--<property name="redisHost">-->
            <!--<value>${redis.cache01.host.name}</value>-->
        <!--</property>-->
        <!--<property name="redisPort">-->
            <!--<value>${redis.cache01.host.port}</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="redisCacheManager02" class="com.ldc.redis.cluster.impl.RedisApiByJedisClientManagerImpl" init-method="init" parent="abstractRedisCacheManager">-->
        <!--<property name="redisHost">-->
            <!--<value>${redis.cache02.host.name}</value>-->
        <!--</property>-->
        <!--<property name="redisPort">-->
            <!--<value>${redis.cache02.host.port}</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="redisCacheManager" class="com.ldc.redis.cluster.impl.RedisCacheServiceImpl">-->
        <!--<property name="redisCacheMap">-->
            <!--<map>-->
                <!--<entry key="0" value-ref="redisCacheManager00" />-->
                <!--<entry key="1" value-ref="redisCacheManager01" />-->
                <!--<entry key="2" value-ref="redisCacheManager02" />-->
            <!--</map>-->
        <!--</property>-->
    <!--</bean>-->
    <!--redis pool config end-->

    <!-- thread pool config start-->
    <!--<bean id ="springThreadPoolExample"  class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >-->
        <!--<property name ="corePoolSize" value ="10" />-->
        <!--<property name ="keepAliveSeconds" value ="30" />-->
        <!--<property name ="maxPoolSize" value ="20" />-->
        <!--<property name ="queueCapacity" value ="2000" />-->
    <!--</bean>-->

    <!--<bean id ="customThreadPool" class ="com.ldc.threadpool.ComplexPausedableThreadPoolTaskExecutor" name="customThreadPool" >-->
        <!--<property name ="corePoolSize" value ="20" />-->
        <!--<property name ="keepAliveSeconds" value ="10" />-->
        <!--<property name ="maxPoolSize" value ="50" />-->
        <!--<property name ="threadPoolParameterService" ref ="threadPoolParameterService" />-->
        <!--<property name ="executableSwitch" value ="THREAD_POOL_PAUSE_SWITCH" />-->
        <!--<property name ="needWatchSwitch" value ="true" />-->
        <!--<property name ="delay" value ="false" />-->
    <!--</bean>-->
    <!-- thread pool config end-->

    <!--<import resource="classpath:/applicationContext-quartz.xml" />-->



    <!-- 开发环境配置文件 -->
    <beans profile="development">
        <context:property-placeholder location="classpath*:spring/properties/development.properties"/>
    </beans>

    <!-- 测试环境配置文件 -->
    <beans profile="test">
        <context:property-placeholder location="classpath*:spring/properties/test.properties"/>
    </beans>


</beans>